{"version":3,"sources":["Components/SearchBox.js","Components/OrderBy.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","filterContacts","react_default","a","createElement","className","class","type","onChange","OrderBy","sortIt","sortBy","href","name","onClick","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","search","target","state","contacts","_this2","fetch","then","response","json","data","catch","error","console","log","_this3","loaded","filter","toLowerCase","includes","address","phone_number","Components_OrderBy","map","Components_SearchBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAoBeA,SAjBG,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,eAElB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,YACXJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOD,MAAM,eAAeE,SAAUP,KAElDC,EAAAC,EAAAC,cAAA,cCCYK,SATC,SAAAT,GAAsB,IAApBU,EAAoBV,EAApBU,OAAQC,EAAYX,EAAZW,OACxB,OACCT,EAAAC,EAAAC,cAAA,OAAKE,MAAM,gBACRJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBO,KAAK,IAAIC,KAAK,YAAYC,QAASJ,EAAQK,MAAM,QAAnF,iBAAyGJ,EAAzG,aCwFSK,qBAtFb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRhB,eAAiB,SAACwB,GAChBP,EAAKQ,SAAS,CAAEC,OAAQF,EAAMG,OAAOb,SAjBnBG,EAoBpBR,OAAS,SAACe,GACoB,cAAvBP,EAAKW,MAAMlB,OACdO,EAAKQ,SAAS,CAAEf,OAAQ,eAGxBO,EAAKQ,SAAS,CAAEf,OAAQ,eAvB1BO,EAAKW,MAAQ,CACbF,OAAQ,GACRG,SAAU,GACVnB,OAAQ,aALUO,mFASA,IAAAa,EAAAV,KAClBW,MAdQ,mDAeLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKL,SAAS,CAAEI,SAAUM,EAAKN,aAC5CO,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAgBvB,IAAAG,EAAApB,KAGHqB,EAASrB,KAAKQ,MAAMC,SACvBa,OACD,SAAAb,GACA,OAAOA,EAASjB,KAAK+B,cAAcC,SAASJ,EAAKZ,MAAMF,OAAOiB,gBAC9Dd,EAASgB,QAAQF,cAAcC,SAASJ,EAAKZ,MAAMF,OAAOiB,gBAC1Dd,EAASiB,aAAaF,SAASJ,EAAKZ,MAAMF,UAqB1C,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACNJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACRJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACXJ,EAAAC,EAAAC,cAAC4C,EAAD,CAAStC,OAAQW,KAAKX,OAAQC,OAAQU,KAAKQ,MAAMlB,SAChD+B,EAAOO,IAAI,SAAAnB,GAAQ,OACpB5B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAd,IACAH,EAAAC,EAAAC,cAAA,mBAAW0B,EAASjB,MACpBX,EAAAC,EAAAC,cAAA,oBAAY0B,EAASiB,cACrB7C,EAAAC,EAAAC,cAAA,sBAAc0B,EAASgB,SACvB5C,EAAAC,EAAAC,cAAA,eAICF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OACXJ,EAAAC,EAAAC,cAAC8C,EAAD,CAAWjD,eAAgBoB,KAAKpB,4BA9EjCkD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.601638c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/SearchBox.css';\r\n\r\nconst SearchBox = ({filterContacts}) => {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"search_box\">\r\n\t\t\t<h3 className=\"gradient_text\">>Search</h3>\r\n\t\t\t<div class=\"dropdown\">\r\n\t\t\t<input type=\"text\" class=\"search_field\" onChange={filterContacts}></input>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\t}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport '../css/OrderBy.css';\r\n\r\nconst OrderBy = ({sortIt, sortBy}) => {\r\n\t\treturn (\r\n\t\t\t<div class=\"sorting_menu\">\r\n\t\t    <button className=\"gradient_text\" href=\"#\" name=\"ascending\" onClick={sortIt} value=\"Name\">Sort by name: {sortBy} order</button>\t\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\r\n\r\nexport default OrderBy;","import React, { Component } from 'react';\nimport SearchBox from './Components/SearchBox';\nimport OrderBy from './Components/OrderBy';\nimport './App.css';\nconst API = \"http://www.mocky.io/v2/581335f71000004204abaf83\";\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n    search: '',\n    contacts: [],\n    sortBy: 'Ascending',\n    }\n  }\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data => this.setState({ contacts: data.contacts }))\n      .catch(error => console.log(error));\n    }  \n\n  filterContacts = (event) => {\n    this.setState({ search: event.target.value });\n  }\n\n  sortIt = (event) => {\n    if ((this.state.sortBy) === 'Ascending'){\n      this.setState({ sortBy: 'Descending' });\n    }\n    else {\n      this.setState({ sortBy: 'Ascending'});\n    }\n  }\n\n  render() {\n    //const {contacts} = this.state;\n\n    let loaded = this.state.contacts\n    .filter(\n    contacts => {\n    return contacts.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.address.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.phone_number.includes(this.state.search);\n    });\n\n    {/*let filteredAndSortedAsc = this.state.contacts\n    .sort((a, b) => { if(a.name < b.name) { return -1; } if(a.name > b.name) { return 1; } return 0; })\n    .filter(\n    contacts => {\n    return contacts.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.address.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.phone_number.includes(this.state.search);\n    });\n\n    let filteredAndSortedDesc = this.state.contacts\n    .sort((a, b) => { if(a.name > b.name) { return -1; } if(a.name < b.name) { return 1; } return 0; })\n    .filter(\n    contacts => {\n    return contacts.name.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.address.toLowerCase().includes(this.state.search.toLowerCase()) ||\n    contacts.phone_number.includes(this.state.search);\n    });*/}\n\n    return (\n      <div className=\"App\">\n      \n          <h1>Phonebook</h1>\n          <div class=\"container\">\n               <div class=\"row\">\n                  <div class=\"col\">\n                  <OrderBy sortIt={this.sortIt} sortBy={this.state.sortBy}/>\n                  {loaded.map(contacts => //\"loaded\" replaced with \"filteredAndSortedAsc\" or \"filteredAndSortedDesc\" works\n                  <ul className=\"gradient_text\"> {/*need to activate this with onClick*/}\n                  <li>Name: {contacts.name}</li>\n                  <li>Phone: {contacts.phone_number}</li>\n                  <li>Address: {contacts.address}</li>\n                  <hr />\n                  </ul>\n                  )}\n                  </div>\n                   <div class=\"col\">\n                   <SearchBox filterContacts={this.filterContacts}/>\n                  </div>\n               </div>\n          </div>       \n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}